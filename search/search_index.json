{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Red Hat OpenShift and IBM Cloud Paks on IBM Z and LinuxONE Workshop Welcome to the Red Hat OpenShift and IBM Cloud Paks on IBM Z and LinuxONE workshop. Below you can find the workshop agenda, presentations, and lab documentation. Agenda Syntax Duration Presentation 1 30-45 minutes Short Break 10-15 minutes Presentation 2 ~ 1 hour Connect to environment as a group 10-15 minutes Hands-on, self-paced labs Remainder of day Note The lab environments will be available the day following the workshop. For example, If the workshop is on a Thursday, the environments will be available until 5PM EST Friday. Presentations Presentation 1 - High Level Overview of Red Hat OpenShift & IBM Cloud Paks on IBM Z Presentation 2 - Technical Deep Dive, Installation & Configuration, Lessons Learned Labs Note The labs are designed so that you can pick and choose you would like to complete. The labs are not designed for you to get through them all in one day. Labs are non-sequential and have no dependencies on one another. Lab 001 - Exploring the OpenShift Console Lab 002 - Using the OpenShift Command Line (oc) Lab 003 - Using the z/OS Cloud Broker with OCP Lab 004 - Deploying an Application from Source Code Lab 005 - Monitoring, Metering, and Metrics with OCP Lab 006 - Using Persistent Storage - MongoDB and NodeJS Lab 007 - Deploying an Application with the Open Liberty Operator Lab 008 - Deploying an Application with Quarkus Red Hat Runtime Lab 009 - Using OpenShift Pipelines Lab 010 - OpenShift Service Mesh Workshop Owners Matt Mondics Paul Novak","title":"Home"},{"location":"#red-hat-openshift-and-ibm-cloud-paks-on-ibm-z-and-linuxone-workshop","text":"Welcome to the Red Hat OpenShift and IBM Cloud Paks on IBM Z and LinuxONE workshop. Below you can find the workshop agenda, presentations, and lab documentation.","title":"Red Hat OpenShift and IBM Cloud Paks on IBM Z and LinuxONE Workshop"},{"location":"#agenda","text":"Syntax Duration Presentation 1 30-45 minutes Short Break 10-15 minutes Presentation 2 ~ 1 hour Connect to environment as a group 10-15 minutes Hands-on, self-paced labs Remainder of day Note The lab environments will be available the day following the workshop. For example, If the workshop is on a Thursday, the environments will be available until 5PM EST Friday.","title":"Agenda"},{"location":"#presentations","text":"Presentation 1 - High Level Overview of Red Hat OpenShift & IBM Cloud Paks on IBM Z Presentation 2 - Technical Deep Dive, Installation & Configuration, Lessons Learned","title":"Presentations"},{"location":"#labs","text":"Note The labs are designed so that you can pick and choose you would like to complete. The labs are not designed for you to get through them all in one day. Labs are non-sequential and have no dependencies on one another. Lab 001 - Exploring the OpenShift Console Lab 002 - Using the OpenShift Command Line (oc) Lab 003 - Using the z/OS Cloud Broker with OCP Lab 004 - Deploying an Application from Source Code Lab 005 - Monitoring, Metering, and Metrics with OCP Lab 006 - Using Persistent Storage - MongoDB and NodeJS Lab 007 - Deploying an Application with the Open Liberty Operator Lab 008 - Deploying an Application with Quarkus Red Hat Runtime Lab 009 - Using OpenShift Pipelines Lab 010 - OpenShift Service Mesh","title":"Labs"},{"location":"#workshop-owners","text":"Matt Mondics Paul Novak","title":"Workshop Owners"},{"location":"lab-assignments/","text":"Lab Assignments Name Team Number Skytap URL Skytap Password OpenShift Username OpenShift Password TBD 01 user01 p@ssw0rd TBD 02 user02 p@ssw0rd TBD 03 user03 p@ssw0rd TBD 04 user04 p@ssw0rd TBD 05 user05 p@ssw0rd TBD 06 user06 p@ssw0rd TBD 07 user07 p@ssw0rd TBD 08 user08 p@ssw0rd TBD 09 user09 p@ssw0rd TBD 10 user10 p@ssw0rd TBD 11 user11 p@ssw0rd TBD 12 user12 p@ssw0rd TBD 13 user13 p@ssw0rd TBD 14 user14 p@ssw0rd TBD 15 user15 p@ssw0rd TBD 16 user16 p@ssw0rd TBD 17 user17 p@ssw0rd TBD 18 user18 p@ssw0rd TBD 19 user19 p@ssw0rd TBD 20 user20 p@ssw0rd","title":"Lab Assignments"},{"location":"lab-assignments/#lab-assignments","text":"Name Team Number Skytap URL Skytap Password OpenShift Username OpenShift Password TBD 01 user01 p@ssw0rd TBD 02 user02 p@ssw0rd TBD 03 user03 p@ssw0rd TBD 04 user04 p@ssw0rd TBD 05 user05 p@ssw0rd TBD 06 user06 p@ssw0rd TBD 07 user07 p@ssw0rd TBD 08 user08 p@ssw0rd TBD 09 user09 p@ssw0rd TBD 10 user10 p@ssw0rd TBD 11 user11 p@ssw0rd TBD 12 user12 p@ssw0rd TBD 13 user13 p@ssw0rd TBD 14 user14 p@ssw0rd TBD 15 user15 p@ssw0rd TBD 16 user16 p@ssw0rd TBD 17 user17 p@ssw0rd TBD 18 user18 p@ssw0rd TBD 19 user19 p@ssw0rd TBD 20 user20 p@ssw0rd","title":"Lab Assignments"},{"location":"lab001-1/","text":"Lab 001 - Exploring the OpenShift Console Important Work In Progress","title":"Introduction"},{"location":"lab001-1/#lab-001-exploring-the-openshift-console","text":"Important Work In Progress","title":"Lab 001 - Exploring the OpenShift Console"},{"location":"lab001-2/","text":"Connect to OCP and Authenticate Important Work in Progress In your virtual machine desktop, open a Chrome web browser . In the browser, navigate to the OpenShift on IBM Z console at the following address: https://console-openshift-console.apps.atsocppa.dmz/ . Note You will receive a security challenge if the cluster has not yet been accessed from your browser. This is due to the default SSL certificate being \u201cself-signed\u201d and not yet recognized. Accept the challenge to continue by clicking Advanced and then clicking Proceed to console-openshift-console.apps.atsocppa.dmz (unsafe) . You will likely need to do this twice due to how OpenShift reroutes Oauth requests. Expand for screenshot You will now see the OpenShift console login page. Log in with the OpenShift credentials provided to you on the Lab Assignments page. Hint Your OpenShift credentials will be something like the following: Username: userNN (where NN is your user number) Password: p@ssw0rd","title":"Connect to OCP"},{"location":"lab001-2/#connect-to-ocp-and-authenticate","text":"Important Work in Progress In your virtual machine desktop, open a Chrome web browser . In the browser, navigate to the OpenShift on IBM Z console at the following address: https://console-openshift-console.apps.atsocppa.dmz/ . Note You will receive a security challenge if the cluster has not yet been accessed from your browser. This is due to the default SSL certificate being \u201cself-signed\u201d and not yet recognized. Accept the challenge to continue by clicking Advanced and then clicking Proceed to console-openshift-console.apps.atsocppa.dmz (unsafe) . You will likely need to do this twice due to how OpenShift reroutes Oauth requests. Expand for screenshot You will now see the OpenShift console login page. Log in with the OpenShift credentials provided to you on the Lab Assignments page. Hint Your OpenShift credentials will be something like the following: Username: userNN (where NN is your user number) Password: p@ssw0rd","title":"Connect to OCP and Authenticate"},{"location":"lab001-3/","text":"The Administrator Perspective Important Work in Progress Take a moment to notice the following elements in the navigation bar: Note These buttons display on each page of the OpenShift console. Note that the Applications button might be missing from your screen, depending on your credentials. By default, the menu on the left side of the page should be activated and displaying the cluster menu. In the left-side menu, select the Administrator perspective if it isn't already showing. With the administrator menu showing, you are provided with a broad range of options to manage the OpenShift cluster and the applications running on it. Developer / Administrator toggle . This lets you flip between which of the two perspectives you want to use. Home : Provides overview of projects, resources, and events in the scope of your credentials. Operators : Provides access to the OperatorHub to install new operators and also lets you view operators that are already installed. Workloads : Expands to provide access to many Kubernetes and OpenShift objects, such as pods, deployments, secrets, jobs and more. Networking : Provides access to services, routes, and ingresses required for external access to the cluster. Storage : Provides access to storage objects in the OpenShift cluster, such as PersistentVolumeClaims. Builds : View and create Build objects \u2013 use to transform input parameters into resulting objects. Pipelines : View and create Pipelines \u2013 Tekton-based CI/CD processes and objects. This will be missing if not installed in your OpenShift cluster. Monitoring : Access cluster resource Monitoring, Metrics, and Alerting. Compute : Access cluster infrastructure \u2013 Control & Compute Nodes, Machines, and more. User Management : Access and manage Users, Groups, Roles, RoleBindings, Service Accounts, and more. Administration : View and edit cluster settings. The Administrator perspective is the default view for the OpenShift console for users who have an administrative access level. This perspective provides visibility into options related to cluster administration, as well as a broader view of the projects associated with the currently logged-in user. In the Menu, click Home -> Projects . The rest of the page is populated by projects. A project has been created for you to work in named userNN-project (where NN is your user number). Note Any project starting with openshift- or kube- contain the workloads running the OpenShift platform itself. Click the userNN-project hyperlink (where NN is your user number). Tip With so many Projects displayed, you can use the search bar to find yours more easily. You will now see the Dashboard for your project. Scroll down the Overview tab of your project . This displays information about what\u2019s going on in your project, such as CPU and memory usage, any alerts or crashlooping pods, an inventory of all the Kubernetes resources deployed in the project, and more. You won\u2019t see much information yet, as no workloads should be running in this project. Click the Workloads tab to the right of YAML. This page displays all of the workloads in your project, so it\u2019s empty for now. Note All objects in OpenShift are generated using YAML files. YAML (standing for Yet Another Markup Language) is meant to be a human-readable language for configuration files. Any OpenShift object such as Deployments, Services, Routes, and nearly everything else can be modified by directly editing their YAML file in either the console or command line. Workloads are typically created by developers, so in the next section, you will swap to the developer perspective to deploy a an application. You will return to the administrator perspective later in this lab.","title":"The Administrator Persepctive"},{"location":"lab001-3/#the-administrator-perspective","text":"Important Work in Progress Take a moment to notice the following elements in the navigation bar: Note These buttons display on each page of the OpenShift console. Note that the Applications button might be missing from your screen, depending on your credentials. By default, the menu on the left side of the page should be activated and displaying the cluster menu. In the left-side menu, select the Administrator perspective if it isn't already showing. With the administrator menu showing, you are provided with a broad range of options to manage the OpenShift cluster and the applications running on it. Developer / Administrator toggle . This lets you flip between which of the two perspectives you want to use. Home : Provides overview of projects, resources, and events in the scope of your credentials. Operators : Provides access to the OperatorHub to install new operators and also lets you view operators that are already installed. Workloads : Expands to provide access to many Kubernetes and OpenShift objects, such as pods, deployments, secrets, jobs and more. Networking : Provides access to services, routes, and ingresses required for external access to the cluster. Storage : Provides access to storage objects in the OpenShift cluster, such as PersistentVolumeClaims. Builds : View and create Build objects \u2013 use to transform input parameters into resulting objects. Pipelines : View and create Pipelines \u2013 Tekton-based CI/CD processes and objects. This will be missing if not installed in your OpenShift cluster. Monitoring : Access cluster resource Monitoring, Metrics, and Alerting. Compute : Access cluster infrastructure \u2013 Control & Compute Nodes, Machines, and more. User Management : Access and manage Users, Groups, Roles, RoleBindings, Service Accounts, and more. Administration : View and edit cluster settings. The Administrator perspective is the default view for the OpenShift console for users who have an administrative access level. This perspective provides visibility into options related to cluster administration, as well as a broader view of the projects associated with the currently logged-in user. In the Menu, click Home -> Projects . The rest of the page is populated by projects. A project has been created for you to work in named userNN-project (where NN is your user number). Note Any project starting with openshift- or kube- contain the workloads running the OpenShift platform itself. Click the userNN-project hyperlink (where NN is your user number). Tip With so many Projects displayed, you can use the search bar to find yours more easily. You will now see the Dashboard for your project. Scroll down the Overview tab of your project . This displays information about what\u2019s going on in your project, such as CPU and memory usage, any alerts or crashlooping pods, an inventory of all the Kubernetes resources deployed in the project, and more. You won\u2019t see much information yet, as no workloads should be running in this project. Click the Workloads tab to the right of YAML. This page displays all of the workloads in your project, so it\u2019s empty for now. Note All objects in OpenShift are generated using YAML files. YAML (standing for Yet Another Markup Language) is meant to be a human-readable language for configuration files. Any OpenShift object such as Deployments, Services, Routes, and nearly everything else can be modified by directly editing their YAML file in either the console or command line. Workloads are typically created by developers, so in the next section, you will swap to the developer perspective to deploy a an application. You will return to the administrator perspective later in this lab.","title":"The Administrator Perspective"},{"location":"lab001-4/","text":"The Developer Perspective Important Work in Progress In the left-side Menu, click the Administrator dropdown, and select Developer . The Developer perspective provides views and workflows specific to developer use cases, while hiding many of the cluster management options typically used by administrators. This perspective provides developers with a streamlined view of the options they typically use. +Add : Clicking on this will open a prompt letting you add a workload to your current project. Topology : Displays all of the deployed workloads in the currently selected project. Monitoring : Lets you view the monitoring dashboard for just this project. Search : Used to search for any type of API resource present in this project, provided you have access to that resource type. Builds : This will let you view or create Build Configurations in the currently selected project. Pipelines : View and create Pipelines \u2013 Tekton-based CI/CD processes and objects. Helm : Displays the Helm releases in this project, or prompts you to install one from the catalog if none are present. Project : Takes you to your project overview page, the project inventory, events, utilization, and more. Config Maps : Displays Config Maps for your project, which store non-confidential data in key-value pairs. Secrets : Displays Secrets for your project. Used to store sensitive, confidential data in key-value pairs, tokens, or passwords. Switching to the Developer perspective takes you to the Topology view. If no workloads are deployed in the selected project, options to deploy a workload are displayed. If this isn't the case, click the +Add button in the menu . Expand to learn about Deployment Methods There are multiple methods of deploying workloads from the OpenShift web browser. Samples : Red Hat provides sample applications in various languages. Use these to see what a pre-made application running in OpenShift can look like. From Git : Use this option to import an existing codebase in a Git repository to create, build, and deploy an application. From Devfile : Similar to From Git, use this option to import a Devfile from your Git repository to build and deploy an application. Container Image : Use existing images from an image stream or registry to deploy it. From Catalog : Explore the Developer Catalog to select the required applications, services, or source to image builders and add it to your project. From Dockerfile : Import a dockerfile from your Git repository to build and deploy an application. YAML : Use the editor to add YAML or JSON definitions to create and modify resources. Database : Filters the Developer Catalog to display only the databases it contains. Operator Backed : Deploy applications that are managed by Operators. Many of these will come from the OperatorHub. Helm Chart : Deploy applications defined by Helm Charts, which provide simple installations, upgrades, rollbacks, and generally reduced complexity. Pipeline : Create a Tekton-based Pipeline to automate application creation and delivery using OpenShift\u2019s built-in CI/CD capabilities. In the next section, you will deploy an application from the OpenShift Developer Catalog.","title":"The Developer Perspective"},{"location":"lab001-4/#the-developer-perspective","text":"Important Work in Progress In the left-side Menu, click the Administrator dropdown, and select Developer . The Developer perspective provides views and workflows specific to developer use cases, while hiding many of the cluster management options typically used by administrators. This perspective provides developers with a streamlined view of the options they typically use. +Add : Clicking on this will open a prompt letting you add a workload to your current project. Topology : Displays all of the deployed workloads in the currently selected project. Monitoring : Lets you view the monitoring dashboard for just this project. Search : Used to search for any type of API resource present in this project, provided you have access to that resource type. Builds : This will let you view or create Build Configurations in the currently selected project. Pipelines : View and create Pipelines \u2013 Tekton-based CI/CD processes and objects. Helm : Displays the Helm releases in this project, or prompts you to install one from the catalog if none are present. Project : Takes you to your project overview page, the project inventory, events, utilization, and more. Config Maps : Displays Config Maps for your project, which store non-confidential data in key-value pairs. Secrets : Displays Secrets for your project. Used to store sensitive, confidential data in key-value pairs, tokens, or passwords. Switching to the Developer perspective takes you to the Topology view. If no workloads are deployed in the selected project, options to deploy a workload are displayed. If this isn't the case, click the +Add button in the menu . Expand to learn about Deployment Methods There are multiple methods of deploying workloads from the OpenShift web browser. Samples : Red Hat provides sample applications in various languages. Use these to see what a pre-made application running in OpenShift can look like. From Git : Use this option to import an existing codebase in a Git repository to create, build, and deploy an application. From Devfile : Similar to From Git, use this option to import a Devfile from your Git repository to build and deploy an application. Container Image : Use existing images from an image stream or registry to deploy it. From Catalog : Explore the Developer Catalog to select the required applications, services, or source to image builders and add it to your project. From Dockerfile : Import a dockerfile from your Git repository to build and deploy an application. YAML : Use the editor to add YAML or JSON definitions to create and modify resources. Database : Filters the Developer Catalog to display only the databases it contains. Operator Backed : Deploy applications that are managed by Operators. Many of these will come from the OperatorHub. Helm Chart : Deploy applications defined by Helm Charts, which provide simple installations, upgrades, rollbacks, and generally reduced complexity. Pipeline : Create a Tekton-based Pipeline to automate application creation and delivery using OpenShift\u2019s built-in CI/CD capabilities. In the next section, you will deploy an application from the OpenShift Developer Catalog.","title":"The Developer Perspective"},{"location":"lab001-5/","text":"Deploy from the Developer Catalog Important Work in Progress In this section, you will be building a sample application from a template. The template will create two pods: A Ruby on Rails blogging application from source code in GitHub A PostgreSQL database from a container image Info A container image holds a set of software that is ready to run, while a container is a running instance of a container image. Images can be hosted in registries, such as the OpenShift internal registry, the Red Hat registry, Docker Hub, or a private registry of your own. Click the From Catalog option from the Add page. This brings up the OpenShift Developer catalog containing all types of applications you can deploy including Operators, Helm Charts, Templates, and more. Find and click the Rails + PostgreSQL (Ephemeral) tile . Tip You can make this easier on yourself by searching for Rails + PostgreSQL (Ephemeral ) in the search bar. Click Instantiate Template on the next screen that appears. You are brought to a page full of configurable parameters that you can edit if so desired. Notice that all of the required fields on this page automatically populate. You can read through all of the options, but there is no need to edit any of them. Click the Create button at the bottom of the page. You will now be taken to the topology view, where you will see two icons \u2013 one for each of the two workload pods that the template will create. If you don\u2019t see the icons right away, you may need to refresh your browser window. Info The Ruby on Rails application will take a few minutes to fully deploy, while the PostgreSQL application will deploy in just a few seconds. The reason for this difference is that the Ruby application is being built (containerized) from Ruby source code located in the GitHub repository located here: https://github.com/sclorg/rails-ex.git into a container image, and then deployed. If you would like to watch the steps that OpenShift is taking to build the containerized application, click the circle labeled rails-postgresql-example, click the Resources tab, and click View Logs in the Builds section . The PostgreSQL application, on the other hand, is deployed from a pre-built container image hosted in quay.io, so it takes much less time to start up. You will know that both applications are successfully deployed and running when each has a solid blue circle. Click the icon for the rails-postgresql-example application . This will bring up a window on the right side of the screen with information about your DeploymentConfig. Click the Details tab if it is not already selected. Here you\u2019ll see information about your DeploymentConfig. Notice that many of the fields such as Labels, Update Strategy, and more have been populated with default values. These can be modified. Click the Actions dropdown . Many application configurations can be modified from this menu, along with other tasks such as starting or pausing a rollout, or deleting the deployment configuration. Click the up arrow next to the blue circle. This scales your application from one pod to two pods. Note This is a simple demonstration of horizontal scaling with Kubernetes. You now have two instances of your pod running in the OpenShift cluster. Traffic to the Rails application will now be distributed to each pod, and if for some reason a pod is lost, that traffic will be redistributed to the remaining pods until a Kubernetes starts another. If a whole compute node is lost, Kubernetes will move the pods to different compute nodes. OpenShift and Kubernetes also support autoscaling of pods based on CPU or memory consumption, but that is outside the scope of this lab. Click the Resources tab . Notice the two pods associated with your Rails application. On this page, you\u2019ll see more information about your pods, any build configurations currently running or completed, and the services/ports associated with the pod. Click the route address a the bottom of the resources tab . Expand for a Tip You could also access this route by clicking on the external link icon associated with your Rails pod on the Topology view. If you see the page above, your Rails application is up and running. You just deployed a Ruby on Rails application from source code residing in GitHub, and connected it to a PostgreSQL container deployed from a container image pulled from quay.io into OpenShift running on an IBM Z server. Feel free to read through the Rails application homepage to learn more about what this application can do. Add /articles to the end of the Rails homepage URL . This will result in a URL like the following: http://rails-postgresql-example-userNN-project.apps.atsocppa.dmz/articles Where NN is your user number. You are now interacting with the blogging application that\u2019s shipped with the Rails source code. If you create a new article, the contents for the Title and Body are stored in the PostgreSQL database in the other pod that makes up this application. In the next section you will navigate back to the Administrator perspective to see the overview of your project with a workload running.","title":"Deploy from the Developer Catalog"},{"location":"lab001-5/#deploy-from-the-developer-catalog","text":"Important Work in Progress In this section, you will be building a sample application from a template. The template will create two pods: A Ruby on Rails blogging application from source code in GitHub A PostgreSQL database from a container image Info A container image holds a set of software that is ready to run, while a container is a running instance of a container image. Images can be hosted in registries, such as the OpenShift internal registry, the Red Hat registry, Docker Hub, or a private registry of your own. Click the From Catalog option from the Add page. This brings up the OpenShift Developer catalog containing all types of applications you can deploy including Operators, Helm Charts, Templates, and more. Find and click the Rails + PostgreSQL (Ephemeral) tile . Tip You can make this easier on yourself by searching for Rails + PostgreSQL (Ephemeral ) in the search bar. Click Instantiate Template on the next screen that appears. You are brought to a page full of configurable parameters that you can edit if so desired. Notice that all of the required fields on this page automatically populate. You can read through all of the options, but there is no need to edit any of them. Click the Create button at the bottom of the page. You will now be taken to the topology view, where you will see two icons \u2013 one for each of the two workload pods that the template will create. If you don\u2019t see the icons right away, you may need to refresh your browser window. Info The Ruby on Rails application will take a few minutes to fully deploy, while the PostgreSQL application will deploy in just a few seconds. The reason for this difference is that the Ruby application is being built (containerized) from Ruby source code located in the GitHub repository located here: https://github.com/sclorg/rails-ex.git into a container image, and then deployed. If you would like to watch the steps that OpenShift is taking to build the containerized application, click the circle labeled rails-postgresql-example, click the Resources tab, and click View Logs in the Builds section . The PostgreSQL application, on the other hand, is deployed from a pre-built container image hosted in quay.io, so it takes much less time to start up. You will know that both applications are successfully deployed and running when each has a solid blue circle. Click the icon for the rails-postgresql-example application . This will bring up a window on the right side of the screen with information about your DeploymentConfig. Click the Details tab if it is not already selected. Here you\u2019ll see information about your DeploymentConfig. Notice that many of the fields such as Labels, Update Strategy, and more have been populated with default values. These can be modified. Click the Actions dropdown . Many application configurations can be modified from this menu, along with other tasks such as starting or pausing a rollout, or deleting the deployment configuration. Click the up arrow next to the blue circle. This scales your application from one pod to two pods. Note This is a simple demonstration of horizontal scaling with Kubernetes. You now have two instances of your pod running in the OpenShift cluster. Traffic to the Rails application will now be distributed to each pod, and if for some reason a pod is lost, that traffic will be redistributed to the remaining pods until a Kubernetes starts another. If a whole compute node is lost, Kubernetes will move the pods to different compute nodes. OpenShift and Kubernetes also support autoscaling of pods based on CPU or memory consumption, but that is outside the scope of this lab. Click the Resources tab . Notice the two pods associated with your Rails application. On this page, you\u2019ll see more information about your pods, any build configurations currently running or completed, and the services/ports associated with the pod. Click the route address a the bottom of the resources tab . Expand for a Tip You could also access this route by clicking on the external link icon associated with your Rails pod on the Topology view. If you see the page above, your Rails application is up and running. You just deployed a Ruby on Rails application from source code residing in GitHub, and connected it to a PostgreSQL container deployed from a container image pulled from quay.io into OpenShift running on an IBM Z server. Feel free to read through the Rails application homepage to learn more about what this application can do. Add /articles to the end of the Rails homepage URL . This will result in a URL like the following: http://rails-postgresql-example-userNN-project.apps.atsocppa.dmz/articles Where NN is your user number. You are now interacting with the blogging application that\u2019s shipped with the Rails source code. If you create a new article, the contents for the Title and Body are stored in the PostgreSQL database in the other pod that makes up this application. In the next section you will navigate back to the Administrator perspective to see the overview of your project with a workload running.","title":"Deploy from the Developer Catalog"},{"location":"lab001-6/","text":"View Workload from the Administrator Perspective Important Work in Progress In the left-side menu, select the Administrator perspective . Navigate back to your project by clicking Menu -> Home -> Projects -> userNN-project The overview page now displays data about the CPU and Memory Usage, new objects in your project inventory, and new activity in the events panel. Click View Events under the right-side panel. This page is populated with all of the events associated with your project, including errors, container creation messages, pod scaling and deletion, and much more. You can filter by type, category, or by searching for keywords. Note Feel free to click through a few more pages from the left-side main menu. You\u2019ll notice a few of them have objects created as a part of the Rails-PostgreSQL application, such as Workloads \uf0e0 Pods, Networking \uf0e0 Services and Routes, Builds \uf0e0 Image Streams. These were all created as part of the template package. Navigate back your project as in the previous step (or by clicking your browser\u2019s back button). Find the Inventory on the project page which lists all of the objects created as part of your application","title":"View Workload from the Administrator Perspective"},{"location":"lab001-6/#view-workload-from-the-administrator-perspective","text":"Important Work in Progress In the left-side menu, select the Administrator perspective . Navigate back to your project by clicking Menu -> Home -> Projects -> userNN-project The overview page now displays data about the CPU and Memory Usage, new objects in your project inventory, and new activity in the events panel. Click View Events under the right-side panel. This page is populated with all of the events associated with your project, including errors, container creation messages, pod scaling and deletion, and much more. You can filter by type, category, or by searching for keywords. Note Feel free to click through a few more pages from the left-side main menu. You\u2019ll notice a few of them have objects created as a part of the Rails-PostgreSQL application, such as Workloads \uf0e0 Pods, Networking \uf0e0 Services and Routes, Builds \uf0e0 Image Streams. These were all created as part of the template package. Navigate back your project as in the previous step (or by clicking your browser\u2019s back button). Find the Inventory on the project page which lists all of the objects created as part of your application","title":"View Workload from the Administrator Perspective"},{"location":"lab001-7/","text":"Cleaning Up Important Work in Progress Navigate back your project as in the previous section (or by clicking your browser\u2019s back button). Find the Inventory on the project page which lists all of the objects created as part of your application Click the Deployment Configs hyperlink . For both of the 2 Deployment Configs that appear click the three dots on the right side of the screen, and then click Delete Deployment Config. This will delete some, but not all of the resources created by the application template. The running pods will be stopped and deleted, but some other components will remain. This is not a problem in the case of our labs.","title":"Cleaning Up"},{"location":"lab001-7/#cleaning-up","text":"Important Work in Progress Navigate back your project as in the previous section (or by clicking your browser\u2019s back button). Find the Inventory on the project page which lists all of the objects created as part of your application Click the Deployment Configs hyperlink . For both of the 2 Deployment Configs that appear click the three dots on the right side of the screen, and then click Delete Deployment Config. This will delete some, but not all of the resources created by the application template. The running pods will be stopped and deleted, but some other components will remain. This is not a problem in the case of our labs.","title":"Cleaning Up"},{"location":"lab002-1/","text":"Lab 002 - Using the OpenShift Command Line (oc) Important Work In Progress","title":"Introduction"},{"location":"lab002-1/#lab-002-using-the-openshift-command-line-oc","text":"Important Work In Progress","title":"Lab 002 - Using the OpenShift Command Line (oc)"},{"location":"lab002-2/","text":"Connect to the Linux Guest Server Important Work In Progress","title":"Connect to the Linux Guest Server"},{"location":"lab002-2/#connect-to-the-linux-guest-server","text":"Important Work In Progress","title":"Connect to the Linux Guest Server"},{"location":"lab002-3/","text":"Log into OpenShift Using the CLI Important Work In Progress","title":"Log into OpenShift Using the CLI"},{"location":"lab002-3/#log-into-openshift-using-the-cli","text":"Important Work In Progress","title":"Log into OpenShift Using the CLI"},{"location":"lab002-4/","text":"Deploy Container Image from the CLI Important Work In Progress","title":"Deploy Container Image from the CLI"},{"location":"lab002-4/#deploy-container-image-from-the-cli","text":"Important Work In Progress","title":"Deploy Container Image from the CLI"},{"location":"lab002-5/","text":"Open a Remote Shell Session into the MongoDB Pod Important Work In Progress","title":"Open a Remote Shell Session into the MongoDB Pod"},{"location":"lab002-5/#open-a-remote-shell-session-into-the-mongodb-pod","text":"Important Work In Progress","title":"Open a Remote Shell Session into the MongoDB Pod"},{"location":"lab002-6/","text":"Working with Pods Important Work In Progress","title":"Working with Pods"},{"location":"lab002-6/#working-with-pods","text":"Important Work In Progress","title":"Working with Pods"},{"location":"lab002-7/","text":"Administrative CLI Commands Important Work in Progress","title":"Administrative CLI Commands"},{"location":"lab002-7/#administrative-cli-commands","text":"Important Work in Progress","title":"Administrative CLI Commands"},{"location":"lab002-8/","text":"Cleaning Up Important Work In Progress","title":"Cleaning Up"},{"location":"lab002-8/#cleaning-up","text":"Important Work In Progress","title":"Cleaning Up"},{"location":"lab003/","text":"Lab 003 - Using the z/OS Cloud Broker Important Work In Progress","title":"Lab 003"},{"location":"lab003/#lab-003-using-the-zos-cloud-broker","text":"Important Work In Progress","title":"Lab 003 - Using the z/OS Cloud Broker"},{"location":"lab004/","text":"Lab 004 - Deploying an Application from Source Code Important Work In Progress","title":"Lab 004"},{"location":"lab004/#lab-004-deploying-an-application-from-source-code","text":"Important Work In Progress","title":"Lab 004 - Deploying an Application from Source Code"},{"location":"lab005/","text":"Lab 005 - Monitoring, Metering, and Metrics with OCP Important Work In Progress","title":"Lab 005"},{"location":"lab005/#lab-005-monitoring-metering-and-metrics-with-ocp","text":"Important Work In Progress","title":"Lab 005 - Monitoring, Metering, and Metrics with OCP"},{"location":"lab006/","text":"Lab 006 - Using Persistent Storage - MongoDB and NodeJS Important Work In Progress","title":"Lab 006"},{"location":"lab006/#lab-006-using-persistent-storage-mongodb-and-nodejs","text":"Important Work In Progress","title":"Lab 006 - Using Persistent Storage - MongoDB and NodeJS"},{"location":"lab007/","text":"Lab 007 - Deploying an Application with the Open Liberty Operator Important Work In Progress","title":"Lab 007"},{"location":"lab007/#lab-007-deploying-an-application-with-the-open-liberty-operator","text":"Important Work In Progress","title":"Lab 007 - Deploying an Application with the Open Liberty Operator"},{"location":"lab008/","text":"Lab 008 - Deploying an Application with Quarkus Red Hat Runtime Important Work In Progress","title":"Lab 008"},{"location":"lab008/#lab-008-deploying-an-application-with-quarkus-red-hat-runtime","text":"Important Work In Progress","title":"Lab 008 - Deploying an Application with Quarkus Red Hat Runtime"},{"location":"lab009/","text":"Lab 010 - OpenShift Service Mesh Important Work In Progress","title":"Lab 009"},{"location":"lab009/#lab-010-openshift-service-mesh","text":"Important Work In Progress","title":"Lab 010 - OpenShift Service Mesh"},{"location":"lab010/","text":"Lab 010 - OpenShift Service Mesh Important Work In Progress","title":"Lab 010"},{"location":"lab010/#lab-010-openshift-service-mesh","text":"Important Work In Progress","title":"Lab 010 - OpenShift Service Mesh"}]}